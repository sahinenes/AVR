
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  00800100  00800100  00000154  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000748  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000692  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000027d  00000000  00000000  00000fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001254  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038a  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000028  00000000  00000000  00001632  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000165a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 33       	cpi	r26, 0x33	; 51
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  88:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <veri_al>:
	while (!( UCSR0A & (1<<UDRE0))); // yazmacýn boþ olmasýný bekle
	UDR0 = data; // yazmaca veri yükle
}
unsigned char veri_al()
{
	while(!(UCSR0A & (1<<RXC0)));
  90:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  94:	88 23       	and	r24, r24
  96:	e4 f7       	brge	.-8      	; 0x90 <veri_al>
	return UDR0;
  98:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  9c:	08 95       	ret

0000009e <main>:
uint8_t sayi;
char str[50];
int main(void)
{
   
   UCSR0B |=(1<<TXEN0)|(1<<RXEN0);//TX ve RX aktif
  9e:	e1 ec       	ldi	r30, 0xC1	; 193
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	88 61       	ori	r24, 0x18	; 24
  a6:	80 83       	st	Z, r24
   UCSR0C|= (1<<UCSZ00)|(1<<UCSZ01); // Veri formatýný ayarlýyoruz
  a8:	e2 ec       	ldi	r30, 0xC2	; 194
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	86 60       	ori	r24, 0x06	; 6
  b0:	80 83       	st	Z, r24
   UBRR0= BAUDRATE; //Bant geniþilði ayarlandý
  b2:	87 e6       	ldi	r24, 0x67	; 103
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
   
   DDRB=0x20;
  be:	80 e2       	ldi	r24, 0x20	; 32
  c0:	84 b9       	out	0x04, r24	; 4
   PORTB=0x00;
  c2:	15 b8       	out	0x05, r1	; 5
   
   sayi=200;
  c4:	88 ec       	ldi	r24, 0xC8	; 200
  c6:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <sayi>
   
    while (1) 
    {
		if (veri_al()=='a')
  ca:	0e 94 48 00 	call	0x90	; 0x90 <veri_al>
  ce:	81 36       	cpi	r24, 0x61	; 97
  d0:	19 f4       	brne	.+6      	; 0xd8 <main+0x3a>
		{
			PORTB=0x20;
  d2:	80 e2       	ldi	r24, 0x20	; 32
  d4:	85 b9       	out	0x05, r24	; 5
  d6:	f9 cf       	rjmp	.-14     	; 0xca <main+0x2c>
		}
		else
		{
			PORTB=0x00;
  d8:	15 b8       	out	0x05, r1	; 5
  da:	f7 cf       	rjmp	.-18     	; 0xca <main+0x2c>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
