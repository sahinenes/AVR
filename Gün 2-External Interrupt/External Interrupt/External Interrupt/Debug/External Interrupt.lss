
External Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000025e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007ba  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ed  00000000  00000000  00000aba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000320  00000000  00000000  000011a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  000014c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d0  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000169  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001a71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ee       	ldi	r30, 0xEA	; 234
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  9e:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_5>:
//Örnek 1 (Karaþimþek Hýzýnýn Ayarlanmasý)

*/

ISR (PCINT2_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	af 93       	push	r26
  b6:	bf 93       	push	r27


	if(PIND &  (1 << PIND5))
  b8:	4d 9b       	sbis	0x09, 5	; 9
  ba:	13 c0       	rjmp	.+38     	; 0xe2 <__vector_5+0x3c>
	{
		bekle=bekle+50;
  bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  c4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  c8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
  cc:	c2 96       	adiw	r24, 0x32	; 50
  ce:	a1 1d       	adc	r26, r1
  d0:	b1 1d       	adc	r27, r1
  d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  d6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  da:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  de:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	}

	if(PIND & (1 << PIND7))
  e2:	4f 9b       	sbis	0x09, 7	; 9
  e4:	13 c0       	rjmp	.+38     	; 0x10c <__vector_5+0x66>
	{
		bekle=bekle-50;
  e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ea:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ee:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  f2:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
  f6:	c2 97       	sbiw	r24, 0x32	; 50
  f8:	a1 09       	sbc	r26, r1
  fa:	b1 09       	sbc	r27, r1
  fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 100:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 104:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 108:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	}



}
 10c:	bf 91       	pop	r27
 10e:	af 91       	pop	r26
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <my_delay_ms>:

void my_delay_ms(uint32_t n) {
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
	while(n--) {
 122:	08 c0       	rjmp	.+16     	; 0x134 <my_delay_ms+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	8f e9       	ldi	r24, 0x9F	; 159
 126:	9f e0       	ldi	r25, 0x0F	; 15
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <my_delay_ms+0xa>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <my_delay_ms+0x10>
 12e:	00 00       	nop
 130:	c9 01       	movw	r24, r18
 132:	b8 01       	movw	r22, r16
 134:	8b 01       	movw	r16, r22
 136:	9c 01       	movw	r18, r24
 138:	01 50       	subi	r16, 0x01	; 1
 13a:	11 09       	sbc	r17, r1
 13c:	21 09       	sbc	r18, r1
 13e:	31 09       	sbc	r19, r1
 140:	67 2b       	or	r22, r23
 142:	68 2b       	or	r22, r24
 144:	69 2b       	or	r22, r25
 146:	71 f7       	brne	.-36     	; 0x124 <my_delay_ms+0x6>
		_delay_ms(1);
	}
 148:	1f 91       	pop	r17
 14a:	0f 91       	pop	r16
 14c:	08 95       	ret

0000014e <main>:

void my_delay_ms(uint32_t n);

int main(void)
{
	bekle=100;
 14e:	84 e6       	ldi	r24, 0x64	; 100
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	a0 e0       	ldi	r26, 0x00	; 0
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 15a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 15e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 162:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	
	
	sei();
 166:	78 94       	sei
	
	DDRB|=(1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2)|(1<<PORTB3);//LEDLER ÇIKIÞ
 168:	84 b1       	in	r24, 0x04	; 4
 16a:	8f 60       	ori	r24, 0x0F	; 15
 16c:	84 b9       	out	0x04, r24	; 4
	
	DDRD&=~(1<<PORTD5);
 16e:	8a b1       	in	r24, 0x0a	; 10
 170:	8f 7d       	andi	r24, 0xDF	; 223
 172:	8a b9       	out	0x0a, r24	; 10
	PORTD|=(1<<PORTD5);
 174:	8b b1       	in	r24, 0x0b	; 11
 176:	80 62       	ori	r24, 0x20	; 32
 178:	8b b9       	out	0x0b, r24	; 11
	DDRD&=~(1<<PORTD7);
 17a:	8a b1       	in	r24, 0x0a	; 10
 17c:	8f 77       	andi	r24, 0x7F	; 127
 17e:	8a b9       	out	0x0a, r24	; 10
	PORTD|=(1<<PORTD7);
 180:	8b b1       	in	r24, 0x0b	; 11
 182:	80 68       	ori	r24, 0x80	; 128
 184:	8b b9       	out	0x0b, r24	; 11
	
	
	PCICR|=(1<<PCIE2);//23 ile 21 inci PCINT pinleri kullnýcaz ona uygun durum deðiþiklik kesmesini etkinleþtirdik
 186:	e8 e6       	ldi	r30, 0x68	; 104
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	84 60       	ori	r24, 0x04	; 4
 18e:	80 83       	st	Z, r24
	PCMSK2|= (1 << PCINT21)|(1<<PCINT23);
 190:	ed e6       	ldi	r30, 0x6D	; 109
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	80 6a       	ori	r24, 0xA0	; 160
 198:	80 83       	st	Z, r24
    while (1) 
    {
		
		
		
			for(uint16_t i=0x01;i<=0x08;i=i*2)
 19a:	c1 e0       	ldi	r28, 0x01	; 1
 19c:	d0 e0       	ldi	r29, 0x00	; 0
 19e:	0d c0       	rjmp	.+26     	; 0x1ba <main+0x6c>
			{
				PORTB=i;
 1a0:	c5 b9       	out	0x05, r28	; 5
				my_delay_ms(bekle);
 1a2:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a6:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1aa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1ae:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1b2:	0e 94 8f 00 	call	0x11e	; 0x11e <my_delay_ms>
    while (1) 
    {
		
		
		
			for(uint16_t i=0x01;i<=0x08;i=i*2)
 1b6:	cc 0f       	add	r28, r28
 1b8:	dd 1f       	adc	r29, r29
 1ba:	c9 30       	cpi	r28, 0x09	; 9
 1bc:	d1 05       	cpc	r29, r1
 1be:	80 f3       	brcs	.-32     	; 0x1a0 <main+0x52>
 1c0:	c8 e0       	ldi	r28, 0x08	; 8
 1c2:	d0 e0       	ldi	r29, 0x00	; 0
 1c4:	0d c0       	rjmp	.+26     	; 0x1e0 <main+0x92>
				PORTB=i;
				my_delay_ms(bekle);
				
			}
			for(uint16_t i=0x08;i>=0x01;i=i/2)
			{    PORTB=i;
 1c6:	c5 b9       	out	0x05, r28	; 5
				my_delay_ms(bekle);
 1c8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1cc:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1d4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1d8:	0e 94 8f 00 	call	0x11e	; 0x11e <my_delay_ms>
			{
				PORTB=i;
				my_delay_ms(bekle);
				
			}
			for(uint16_t i=0x08;i>=0x01;i=i/2)
 1dc:	d6 95       	lsr	r29
 1de:	c7 95       	ror	r28
 1e0:	20 97       	sbiw	r28, 0x00	; 0
 1e2:	89 f7       	brne	.-30     	; 0x1c6 <main+0x78>
 1e4:	da cf       	rjmp	.-76     	; 0x19a <main+0x4c>

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
