
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c5  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063a  00000000  00000000  0000089d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000237  00000000  00000000  00000ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035f  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000021  00000000  00000000  000014a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 56 00 	call	0xac	; 0xac <main>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <read_adc>:
}


//Örnek 1 (ADC Hazýrlama ve Okuma)
uint16_t read_adc(uint8_t channel){
	ADMUX &= 0xF0; // Eski kanal bilgisini temizle
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	90 81       	ld	r25, Z
  86:	90 7f       	andi	r25, 0xF0	; 240
  88:	90 83       	st	Z, r25
	ADMUX |= channel; // Yeni kanal bilgisini yükle
  8a:	90 81       	ld	r25, Z
  8c:	89 2b       	or	r24, r25
  8e:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); // Yeni Çevirim Baþlat
  90:	ea e7       	ldi	r30, 0x7A	; 122
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)); // Çevirim bitene kadar bekle (bu kýsým çok önemli)
  9a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  9e:	86 fd       	sbrc	r24, 6
  a0:	fc cf       	rjmp	.-8      	; 0x9a <read_adc+0x1a>
	return ADCW; // ADC çevirim deðerini geri döndür.
  a2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  a6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  aa:	08 95       	ret

000000ac <main>:

int main(void)
{
	//Örnek 1 (ADC Hazýrlama ve Okuma)
	
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)); 
  ac:	ea e7       	ldi	r30, 0x7A	; 122
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	87 60       	ori	r24, 0x07	; 7
  b4:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); // Referans AVCC yani 5V
  b6:	ac e7       	ldi	r26, 0x7C	; 124
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	8c 91       	ld	r24, X
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN); // ADC'yi Aç
  c0:	80 81       	ld	r24, Z
  c2:	80 68       	ori	r24, 0x80	; 128
  c4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); // Ýlk deneme ölçümünü yap ve diðer ölçüme hazýr hale getir.
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24
    //Örnek 1 (ADC Hazýrlama ve Okuma)


   DDRD=0xf0;
  cc:	80 ef       	ldi	r24, 0xF0	; 240
  ce:	8a b9       	out	0x0a, r24	; 10
    while (1) 
    {
		//Örnek 1 (ADC Hazýrlama ve Okuma)
		//read_adc(0x00);//ADC0 oku
		//Örnek 1 (ADC Hazýrlama ve Okuma)
		if (read_adc(0x02)>=250)
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	0e 94 40 00 	call	0x80	; 0x80 <read_adc>
  d6:	8a 3f       	cpi	r24, 0xFA	; 250
  d8:	91 05       	cpc	r25, r1
  da:	18 f0       	brcs	.+6      	; 0xe2 <main+0x36>
		{
			PORTD=0xf0;
  dc:	80 ef       	ldi	r24, 0xF0	; 240
  de:	8b b9       	out	0x0b, r24	; 11
  e0:	f7 cf       	rjmp	.-18     	; 0xd0 <main+0x24>
		}
		else
		{
			PORTD=0x00;
  e2:	1b b8       	out	0x0b, r1	; 11
  e4:	f5 cf       	rjmp	.-22     	; 0xd0 <main+0x24>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
